#!/bin/bash

      ME=${0##*/}
  MY_DIR=$(dirname "$(readlink -f $0)")

#== BEGIN_CONFIG

     MBR_GPT="msdos"
        SIZE=100
    FAT_SIZE=50
  EXT_MARGIN=20
  FAT_MARGIN=5

 EXT_OPTIONS="-m0 -i100000 -J size=32"
   EXT_LABEL="LiveUSB"

     LIVE_MP="/live/boot-dev"
  LIVE_FILES="cdrom.ico version antiX/{vmlinuz,initrd.gz,linuxfs}{,.md5}"
   LIVE_DIRS="boot EFI efi"
   GRUB_CONF="boot/grub/grub.cfg"
      CHEATS=""
    WORK_DIR="/tmp/$ME"
   LOCK_FILE="/run/lock/$ME"

   SHELL_LIB="cli-shell-utils.bash"
    LIB_PATH="/usr/local/lib/cli-shell-utils"

#== END_CONFIG

   CONF_FILE="/root/.config/$ME/$ME.conf"
THE_LOG_FILE="/var/log/$ME.log"
THE_ERR_FILE="/var/log/$ME.errors"
    LOG_FILE=/dev/null
    ERR_FILE=/dev/null

ORDERED_CMDS="partition makefs makefs-ext makefs-fat copy copy-ext copy-fat"
ORDERED_CMDS="$ORDERED_CMDS uuids cheats cheats-syslinux cheats-grub install"
    ALL_CMDS="sizes all $ORDERED_CMDS"
    PRE_CMDS="partition makefs"
   POST_CMDS="uuids cheats install"

   ALL_FORCE="copy,flock,makefs,umount,usb"

   PATH="$MY_DIR:/usr/local/share/live-usb-maker/bin:$PATH"

usage() {
    local ret=${1:-0}

cat<<Usage
Usage: $ME [options] <iso-file> <usb-device> <commands>

Create a live-usb on <usb-device> from <iso-file>.  This will destroy
any existing information on <usb-device>.  Uses ext4 as the filesystem
for the live-usb and add a small fat32 file system for booting via UEFI.

  - Use "clone" as the iso-file to clone a running live system.
  - Use "clone=<dir>" to clone from a mounted live-usb or iso-file.
  - You may specify a device as the iso-file.  That device will be
    mounted and cloned.

At least one command must be given.  If "all" is not given then only the
commands given will be run.  Use a trailing "+" to run a command and all
commands after it.

Commands:
    sizes              Only show and check sizes, don't do anything
    all                Do all commands below
    partition          Partition the live usb
    makefs-ext         Create the ext file system
    makefs-fat         Create the fat file system
    makefs             Both makefs-ext and makefs-fat
    copy-ext           Copy files to live usb ext partition
    copy-fat           Copy files to fat partition
    copy               Both copy-ext and copy-fat
    uuids              Write UUIDs linking file systems
    cheats             Copy cheat codes to live-usb
    install            Install the legacy bootloader

Options:
  -a --auto            Never ask questions.  Always assume the safe answer
  -c --cheat=xxx       Add these cheatcodes to the live-usb
  -C --clear           Delete files from each partition before copying
  -d --debug           Pause before cleaning up
  -e --esp-size=XX     Size of ESP (fat) partition in MiB (default 50)
  -E --ext-options=XX  Use these options when creating the ext4 filesystem
  -f --force=XXXX      Force the options specfied:
                           umount: Allows try to umount all partitions on drive
                              usb: Ignore usb/removable check
                           makefs: Make the ext4 filesystem even if one exists
                             copy: Overwrite ext4 partition even if antiX/ exists
                              all: All of the above (dangerous!)

  -g --gpt             Use gpt partitioning instead of msdos
  -h --help            Show this usage
  -i --ignore-config   Ignore the config file
  -L --label=Name      Label ext partition with Name
  -p --pretend         Don't run most commands, just show them
  -P --Pretend         Pretend witout verbose
  -q --quiet           Print less
  -s --size=XX         Percent of usb-device to use in (default 100)
  -v --verbose         Print more, show commands when run
  -w --write-config    Write an fresh config file

Notes:
  - short options stack. Example: -Ff instead of -F -f
  - options can be intermingled with commands and parameters
  - config file: $CONF_FILE
  - the config file will be sourced if it exists
  - it will be created if it doesn't exist
Usage
    exit $ret
}

eval_early_argument() {
    case $1 in
      -ignore-config|i) IGNORE_CONF=true                   ;;
       -write-config|w) IGNORE_CONF=true ; WRITE_CONF=true ;;
               -help|h) usage                              ;;
    esac
}

eval_argument() {
    local arg=$1 val=$2
        case $arg in
              -auto|a)  AUTO_MODE=true                   ;;
             -cheat|c)  CHEATS="$CHEATS${CHEATS:+ }$val" ;;
             -cheat=*)  CHEATS="$CHEATS${CHEATS:+ }$val" ;;
             -clear|C)  CLEAR=true                       ;;
             -debug|d)  DEBUG=true                       ;;
          -esp-size|e)  FAT_SIZE=$val                    ;;
       -ext-options|E)  EXT_OPTIONS=$val                 ;;
       -ext-options=*)  EXT_OPTIONS=$val                 ;;
          -esp-size=*)  FAT_SIZE=$val                    ;;
             -force|f)  FORCE="$FORCE,$val"              ;;
             -force=*)  FORCE="$FORCE,$val"              ;;
               -gpt|g)  MBR_GPT="gpt"                    ;;
             -label|L)  EXT_LABEL=$val                   ;;
             -label=*)  EXT_LABEL=$val                   ;;
           -pretend|p)  PRETEND=true ; BE_VERBOSE=true   ;;
           -Pretend|P)  PRETEND=true ; BE_VERBOSE=       ;;
             -quiet|q)  QUIET=true                       ;;
              -size|s)  SIZE=${val%\%}                   ;;
              -size=*)  SIZE=${val%\%}                   ;;
           -verbose|v)  BE_VERBOSE=true                  ;;

       # These are read early.  They are not unknown
     -ignore-config|i)                                   ;;
      -write-config|w)                                   ;;

               *)  fatal $"Unknown parameter %s" "-$arg" ;;
    esac
}

assign_parameter() {
    local cnt=$1 param=$2
   case $cnt in
        1) ISO_FILE=$param     ;;
        2) DEVICE=$param       ;;
        *) CMDS="$CMDS $param" ;;
    esac
}

takes_param() {
    case $1 in
       -cheat|c) return 0 ;;
    -esp-size|e) return 0 ;;
       -force|f) return 0 ;;
       -label|L) return 0 ;;
        -size|s) return 0 ;;
    esac
    return 1
}

main() {
    local SHIFT SHORT_STACK="cdefghLpPqsvw"
    local BE_VERBOSE ISO_FILE DEVICE FATAL_QUESTION CMD PARAM_CNT

    set_colors

    local orig_args="$*"
    local START_T=$(date +%s)

    [ $# -eq 0 ] && usage

    # Let non-root users get usage.  Need to get --ignore-config early.
    read_early_params "$@"

    [ $UID -eq 0 ] || fatal 099 $"This script must be run as root"

    ERR_FILE=$THE_ERR_FILE

    trap clean_up EXIT

    do_flock $LOCK_FILE $ME

    rm -f $ERR_FILE

    if [ -z "$IGNORE_CONF" ]; then
        test -r "$CONF_FILE" && . "$CONF_FILE"
        test -e "$CONF_FILE" || write_conf "$CONF_FILE"
    fi

    read_all_cmdline_mingled "$@"

    # Always write a new config file and then exit if requested
    if [ "$WRITE_CONF" ]; then
        reset_conf
        write_conf "$CONF_FILE"
        exit 0
    fi

    [ $PARAM_CNT -lt 2 ] && fatal $"Expected at least two command line arguments"

    local usb_dev=$(expand_device $DEVICE)
    [ ${#usb_dev} -gt 0 ] || fatal $"Could not find device %s" "$DEVICE"

    # We start logging right after we've expanded the target device
    start_log "$orig_args" "$CMDS" "$ISO_FILE" "$usb_dev"

    [ "$PRETEND" ] && msg $"PRETEND MODE ENABLED"

    case $SIZE in
        [1-9]|[0-9][0-9]|100) ;;
        *) fatal $"Bad size format '%s'.  Should be between %s and %s inclusive." "$(pqh $SIZE)" 1 100
    esac

    [ -z "${FAT_SIZE##[0-9]}" ] && fatal $"esp-size must be larger than %s" 9
    echo $FAT_SIZE | egrep -q "^[1-9][0-9]+$" || fatal $"esp-size must be an integer larger than %s" 9

    #echo "$CMDS" | egrep -q "(^| )pre( |$)"  && CMDS="$CMDS $PRE_CMDS"
    #echo "$CMDS" | egrep -q "(^| )post( |$)" && CMDS="$CMDS $POST_CMDS"

    check_cmds  CMDS  "$ALL_CMDS" "$ORDERED_CMDS"
    check_force FORCE "$ALL_FORCE"

    mkdir -p $WORK_DIR || fatal $"Could not make a work directory under /tmp"
    chmod 755 $WORK_DIR

    test -e $usb_dev || fatal $"Device %s does not exist" $usb_dev
    test -b $usb_dev || fatal $"Device %s is not a block device" $usb_dev

    local dev_type=$(lsblk -no type --nodeps $usb_dev)
    [ "$dev_type" = "disk" ] || fatal $"Device %s is not a disk device" $usb_dev

    local ext_dev=$(get_partition $usb_dev 1)
    local fat_dev=$(get_partition $usb_dev 2)

    # fatal "The device %s does not seem to be usb or removeable."
    force usb || is_usb_or_removable $usb_dev || yes_NO_fatal "usb" \
        $"Do you want to use it anyway (dangerous)?" \
        $"Use %s to always ignore this warning"      \
        $"The device %s does not seem to be usb or removeable."  "$usb_dev"

    ISO_DIR=$WORK_DIR/iso
    EXT_DIR=$WORK_DIR/ext
    FAT_DIR=$WORK_DIR/fat
    MNT_DIR=$WORK_DIR/live-dev

    mkdir $ISO_DIR $EXT_DIR $FAT_DIR || fatal $"Could not make %s subdirectories" "$WORK_DIR"

    mount_iso "$ISO_FILE" $ISO_DIR || fatal $"Could not mount iso file %s" "$ISO_FILE"

    local iso_version version_file=$ISO_DIR/version
    if test -r $version_file && iso_version=$(cat $version_file 2>/dev/null) \
        && [ ${#iso_version} -gt 0 ]; then
        msg $"Distro: %s" "$(pq $iso_version)"
        msg
    fi

    local total_size=$(parted $usb_dev unit MiB print | sed -rn "s/^Disk.*: ([0-9]+)MiB$/\1/p")
    local mib_size=$((total_size * SIZE / 100 - 1))
    local ext_size=$((mib_size - FAT_SIZE))
    local ext_needed=$(du_size $ISO_DIR/*)
    local fat_needed=$(du_size $ISO_DIR/{boot,EFI,efi})
    local ext_extra=$((ext_size - ext_needed))
    local fat_extra=$((FAT_SIZE - fat_needed))

    local mem_fmt="%20s:$num_co %7s$m_co MiB"
    local available=$"available" needed=$"needed" extra=$"extra"
    msg "$mem_fmt" $"total usb size"     $total_size
    msg "$mem_fmt" $"requested usb size" $mib_size
    msg "$mem_fmt" "ext $available"      $ext_size
    msg "$mem_fmt" "ext $needed"         $ext_needed
    msg "$mem_fmt" "ext $extra"          $ext_extra
    msg "$mem_fmt" "fat $available"      $FAT_SIZE
    msg "$mem_fmt" "fat $needed"         $fat_needed
    msg "$mem_fmt" "fat $extra"          $fat_extra
    msg

    if [ ${#CMDS} -le 0 ]; then
        echo -e $"No command(s) given.  Try 'all'."
        exit 0
    fi

    check_size ext $ext_extra $EXT_MARGIN
    check_size fat $fat_extra $FAT_MARGIN

    given_cmd sizes && my_exit 0

    umount_all $usb_dev

    need partition && do_partition "$usb_dev" "$MBR_GPT" $ext_size $mib_size

    need makefs-ext && do_makefs_ext "$ext_dev" "$EXT_OPTIONS" "$EXT_LABEL"
    need makefs-fat && do_makefs_fat $fat_dev

    my_mount $ext_dev $EXT_DIR
    my_mount $fat_dev $FAT_DIR

    if [ "$QUIET" ]; then
        (echo; df -Tm $EXT_DIR $FAT_DIR; echo) >> $LOG_FILE
    else
        (echo; df -Tm $EXT_DIR $FAT_DIR; echo) | tee -a $LOG_FILE
    fi

    need copy-ext && do_copy_ext $ISO_DIR $EXT_DIR
    need copy-fat && do_copy_fat $ISO_DIR $FAT_DIR

    local ext_uuid=$(lsblk -no uuid $ext_dev)
    local fat_uuid=$(lsblk -no uuid $fat_dev)

    need uuids   && do_uuids $EXT_DIR "$ext_uuid" "$FAT_DIR/$GRUB_CONF" "$fat_uuid"

    [ ${#CHEATS} -gt 0 ] && need cheats-syslinux && do_cheats_syslinux $EXT_DIR "$CHEATS"
    [ ${#CHEATS} -gt 0 ] && need cheats-grub     && do_cheats_grub     $FAT_DIR "$CHEATS"

    need install && do_install $usb_dev $EXT_DIR $MBR_GPT

    my_exit 0
}

mount_iso() {
    local file=$1  dir=$2
    mkdir -p $dir

    is_mountpoint $dir && fatal $"Directory '%s' is already a mountpoint" $dir

    case $file in
        clone) mount_live $dir              ; return ;;
      clone=*) mount_live $dir "${file#*=}" ; return ;;
    esac

    local block_dev=$(expand_device $file)
    file=${block_dev:-$file}

    if test -b $file; then
        mount -o ro "$file" $dir
        is_mountpoint $dir && return 0
    else
        test -e "$file" || fatal $"Could not find iso file %s" "$file"
        test -r "$file" || fatal $"Could not read iso file %s" "$file"

        local type
        for type in iso9660 udf; do
            mount -t $type -o loop,ro "$file" $dir 2>/dev/null
            is_mountpoint $dir && return 0
        done
    fi

    fatal $"Could not mount iso file %s" "$file"
}

mount_live() {
    local targ_dir=$1  live_dir=${2:-$LIVE_MP}

    is_mountpoint "$targ_dir" && fatal $"Live directory '%s' is already a mountpoint" "$targ_dir"

    # Allow live "directory" to be a device that we mount
    local block_dev=$(expand_device $live_dir)
    if [ ${#block_dev} -gt 0 ];  then
        my_mkdir $MNT_DIR
        mount -o ro $block_dev $MNT_DIR
        is_mountpoint $MNT_DIR || fatal $"Could not mount device %s" "$block_dev"
        live_dir=$MNT_DIR
    fi

    test -d "$live_dir"       || fatal $"Live directory '%s' is not a directory"   "$live_dir"
    is_mountpoint "$live_dir" || fatal $"Live directory '%s' is not a mountpoint"  "$live_dir"

    mount -t devtmpfs devtmpfs $targ_dir

    # NOTE:
    # the cd && eval "ls ..." allows us to use globbing expansions with spaces in paths

    local dir from dest
    while read dir; do
        from="$live_dir/$dir"
        dest="$targ_dir/$dir"
        test -d "$from" || continue
        mkdir -p "$dest" || fatal $"Could not create directory %s" "$dest"
        mount --bind "$from" "$dest"
    done <<Live_Dirs
$(cd "$live_dir" && eval "ls -d $LIVE_DIRS" 2>/dev/null)
Live_Dirs

    local file
    while read file; do
        from="$live_dir/$file"
        dest="$targ_dir/$file"
        test -f "$from" || continue
        mkdir -p "$(dirname "$dest")" || fatal $"Could not mkdir %s" "$(dirname "$dest")"
        touch "$dest"                 || fatal $"Could not touch file %s" "$dest"
        mount --bind "$from" "$dest"
    done <<Live_Files
$(cd "$live_dir" && eval "ls -d $LIVE_FILES" 2>/dev/null)
Live_Files
}

do_partition() {
    local drive=$1  type=${2:-msdos}  ext_size=$3  mib_size=$4

    local boot_flag
    case $type in
          gpt) boot_flag=legacy_boot ;;
        msdos) boot_flag=boot        ;;
            *) fatal $"Unknown partitioning scheme: %s.  Expected msdos or gpt" "$type"
               ;;
    esac

    msg $"Using %s partitioning" $(pq $type)

    cmd parted --script --align optimal $usb_dev   \
        unit MiB                                   \
        mklabel $type                              \
        mkpart primary ext4  1         $ext_size   \
        mkpart primary fat32 $ext_size $mib_size   \
        set 1 $boot_flag on                        \
        set 2 esp  on || fatal $"Partitioning failed"
}

do_makefs_ext() {
    local dev=$1  options=$2  label=$3  force_ext

    force makefs && force_ext="-F"
    cmd mkfs.ext4 $force_ext $options -L "$label" $dev \
        || fatal "makefs" $"Could not make %s file system on %s.  Perhaps try %s" "ext4" $ext_dev "--force=makefs"
}

do_makefs_fat() {
    local fat_dev=$1
    cmd mkfs.fat -n "LIVE-ESP" $fat_dev \
        || fatal $"Could not make %s file system on %s" "fat32" "$fat_dev"
}

do_copy_ext() {
    local iso_dir=$1  ext_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $ext_dir/*

    if test -d $ext_dir/antiX && ! force copy; then
        warn $"Not over-writing %s partition due to existing %s directory" ext antiX/
        warn $"Use %s to overwrite" "--force=copy"
        return
    fi
    msg $"Copying files ..."
    cmd cp -a $iso_dir/* $ext_dir/ || fatal $"Error when copying files to live usb"
    sync
}

do_copy_fat() {
    local iso_dir=$1  fat_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $fat_dir/* 2>/dev/null

    local top
    for top in $iso_dir/{efi,EFI,boot}; do
        test -e $top || continue
        cmd cp -r $top $fat_dir/ \
            || warn $"Error when copying %s files to fat partition" "$(basename $top)"
    done
}

do_cheats_syslinux() {
    #warn "Cheats are still being worked on"; return

    local ext_dir=$1  cheats=$2
    local syslinux_cfg=$ext_dir/boot/syslinux/syslinux.cfg

    require cheats-syslinux gfxsave || return

    local file params
    local verbose=1
    [ "$BE_VERBOSE" ] && verbose=6
    if test -w $syslinux_cfg; then
        params=$(sed -nr "1,/^\s*APPEND\s/s/^\s*APPEND\s+//p" $syslinux_cfg)
        Msg "syslinux params: %s" "$(pq $params $cheats)"
        VERBOSE=$verbose CMDLINE="$params $cheats" cmd gfxsave $ext_dir/boot both
    else
        warn $"Could not find %s file to update" "$(basename $syslinux_cfg)"
    fi
}

do_cheats_grub() {
    #warn "Cheats are still being worked on"; return
    local fat_dir=$1  cheats=$2
    local grub_cfg=$fat_dir/boot/grub/grub.cfg

    require cheats-grub vmlinuz-version grub2-save || return

    local params

    if test -w $grub_cfg; then
        params=$(sed -nr "1,/^\s*linux\s/s/^\s*linux\s+[^ ]+//p" $grub_cfg)
        Msg "grub params: %s" "$(pq $params $cheats)"
        cmd grub2-save $fat_dir --no-kernel --cheats="${params% } $cheats"
    else
        warn $"Could not find %s file to update" $(basename $grub_cfg)
    fi
}

do_uuids() {
    local ext_dir=$1  ext_uuid=$2  grub_cfg=$3  fat_uuid=$4
    if [ ${#fat_uuid} -gt 0 ]; then
        local fat_file=$ext_dir/antiX/esp-uuid
        cmd mkdir -p $(dirname $fat_file) || fatal $"Making directory %s failed" "$(dirname $fat_file)"
        cmd write_file $fat_file $fat_uuid
    else
        warn $"No %s given for %s partition" UUID fat
    fi

    if [ ${#ext_uuid} -eq 0 ]; then
        warn $"No %s give for %s partition" UUID ext4
        return
    fi

    if ! test -e $grub_cfg; then
        warn $"Could not find %s file" "$(basename $grub_cfg)"
        return
    fi

    local new_line="search --no-floppy --set=root --fs-uuid $ext_uuid"
    if grep -q "search.*--set=root.*" $grub_cfg; then
        # Replace the line(s) if it/they exists
        cmd sed -i "/search.*--set=root.*/  s/.*/$new_line/" $grub_cfg \
            || fatal "sed on %s failed" "$(basename $grub_cfg)"
    else
        # Add the new line before the first menuentry line if not
        cmd sed -ri "1,/^\s*menuentry/s/(^\s*menuentry)/$new_line\n\n\1/" $grub_cfg \
            || fatal "sed on %s failed" "$(basename $grub_cfg)"
    fi
}

do_install() {
    local usb_dev=$1  ext_dir=$2  type=$3

    local fname
    case $type in
          gpt) fname=gptmbr.bin ;;
        msdos) fname=mbr.bin    ;;
            *) fatal $"Unknown partitioning scheme: %s.  Expected msdos or gpt" "$type"
               ;;
    esac

    local dir file d
    for dir in /usr/share/syslinux /usr/lib/syslinux/mbr; do
        test -e $dir/$fname || continue
        file=$dir/$fname
        break
    done

    [ "$file" ] || fatal $"Could not find file %s" "$fname"
    cmd dd bs=440 conv=notrunc count=1 if=$file of=$usb_dev > /dev/null || fatal $"%s command failed" dd

    local sdir idir syslinux_dir isolinux_dir
    for sdir in boot/syslinux syslinux; do
        test -d $ext_dir/$sdir || continue
        syslinux_dir=$ext_dir/$sdir
        break
    done
    if [ -z "$syslinux_dir" ]; then
        for idir in boot/isolinux isolinux; do
            test -d $ext_dir/$idir || continue

            warn $"Create syslinux directory from %s" $idir
            syslinux_dir=$ext_dir/${idir%isolinux}syslinux
            cmd cp -r $ext_dir/$idir $syslinux_dir || fatal $"Could not copy the isolinux directory"
            local f
            for f in $(cd $syslinux_dir && ls isolinux.*); do
                test -e $ext_dir/$sdir/$f || continue
                cmd mv $ext_dir/$sdir/$f $ext_dir/$sdir/syslinux${f#isolinux}
            done
            break
        done
    fi
    [ "$syslinux_dir" ] || fatal $"Could not find a syslinux or isolinux directory"
    cmd extlinux -i $syslinux_dir || fatal "%s command failed" extlinux
}

check_size() {
    local type=$1  extra=$2  margin=$3
    [ $extra -lt 0 ] && fatal $"Not enough space on %s partition" "$type"
    [ $extra -lt $margin ] && fatal $"Less than %s MiB would remain on %s partition" "$margin" "$type"
}

my_exit() {
    local ret=${1:-0}

    show_elapsed

    if [ "$DEBUG" ]; then
        echo -n "${green}Press <Enter>$nc_co "
        read x
    fi

    Msg "=> cleaning up"
    exit $ret
}

write_conf() {
    local file=$1

    mkdir -p $(dirname $file)
    Msg
    Msg $"Writing config file at %s" "$file"
    Msg

    cat<<Conf_File > $file
# $(basename $file)
#
# This file will be sourced by the live-usb-maker script if it is found
# at $file

     MBR_GPT="$MBR_GPT"
        SIZE=$SIZE
    FAT_SIZE=$FAT_SIZE
  EXT_MARGIN=$EXT_MARGIN
  FAT_MARGIN=$FAT_MARGIN

 EXT_OPTIONS="$EXT_OPTIONS"
   EXT_LABEL="$EXT_LABEL"

     LIVE_MP="$LIVE_MP"
  LIVE_FILES="$LIVE_FILES"
   LIVE_DIRS="$LIVE_DIRS"

   GRUB_CONF="$GRUB_CONF"
      CHEATS=""
Conf_File
}

start_log() {
    local args=$1 cmds=${2# } iso=$3 dev=$4

    LOG_FILE=$THE_LOG_FILE

    cat <<Start_Log >> $LOG_FILE
---------------------------------------------------------------------
$ME
    started: $(date)
comand line: $args
  found lib: $FOUND_LIB
   commands: $cmds
   iso file: $iso
     device: $dev
     cheats: $CHEATS

Start_Log
}

umount_work_dirs() {
    [ -n "$WORK_DIR" ] || return

    local mp try
    for mp in $(mount | cut -d" " -f3 | egrep "^$WORK_DIR/[^/]+$"); do
        umount -r "$mp"
    done
    mount | cut -d" " -f3 | egrep -q "^$WORK_DIR/" || return 0

    for try in $(seq 1 30); do
        for mp in $(mount | cut -d" " -f3 | egrep "^$WORK_DIR/[^/]+$"); do
            umount -r "$mp"
        done
        mount | cut -d" " -f3 | egrep -q "^$WORK_DIR/" || return 0
        sleep .1
    done
}

clean_up() {
    sync; sync
    local mp
    for mp in $ISO_DIR $EXT_DIR $FAT_DIR $MNT_DIR; do
        is_mountpoint $mp && umount -r $mp
        if ! is_mountpoint $mp; then
            rm -rf $mp
        else
            warn "%s remains mounted" "$mp"
            continue
        fi
    done
    rm -f $LOCK_FILE
    test -d $WORK_DIR && rmdir $WORK_DIR
}

load_lib() {
    local file=$1 path=$2
    shift

    unset FOUND_LIB
    local dir lib found orig_ifs=$IFS
    IFS=:
    for dir in $path; do
        lib=$dir/$file
        test -r $lib || continue
        if ! . $lib; then
            printf "Error when loading library %s\n" "$lib" >&2
            printf "This is a fatal error\n" >&2
            exit 15
        fi
        FOUND_LIB=$lib
        IFS=$orig_ifs
        return 0
    done

    printf "Could not find library '%s' on path '%s'\n" "$file" "$path" >&2
    printf "This is a fatal error\n" >&2
    exit 17
}

#===== Start Here =============================================================
LIB_PATH="$LIB_PATH:$MY_DIR/../cli-shell-utils:$MY_DIR"
load_lib "$SHELL_LIB" "$LIB_PATH"

main "$@"

