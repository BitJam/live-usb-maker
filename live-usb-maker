#!/bin/bash

ME=${0##*/}

     MBR_GPT="msdos"
        SIZE=100
    FAT_SIZE=50
  EXT_MARGIN=20
  FAT_MARGIN=5

 EXT_OPTIONS="-m0 -N10000 -J size=32"
   EXT_LABEL="LiveUSB"

     LIVE_MP="/live/boot-dev"
  LIVE_FILES="cdrom.ico version antiX/{vmlinuz,initrd.gz,linuxfs}{,.md5}"
   LIVE_DIRS="boot EFI efi"
   GRUB_CONF="boot/grub/grub.cfg"

   CONF_FILE="/root/.config/$ME/$ME.conf"
THE_LOG_FILE="/var/log/$ME.log"
THE_ERR_FILE="/var/log/$ME.errors"
    LOG_FILE=/dev/null
    ERR_FILE=/dev/null

    ALL_CMDS="sizes all partition makefs makefs-ext makefs-fat copy copy-ext copy-fat uuids install"

usage() {
    local ret=${1:-0}

cat<<Usage
Usage: $ME [options] <iso-file> <usb-device> <commands>

Create a live-usb on <usb-device> from <iso-file>.  This will destroy
any existing information on <usb-device>.  Uses ext4 as the filesystem
for the live-usb and add a small fat32 file system for booting via UEFI.

  - Use "live" as the iso-file to clone a running live system.
  - Use "live=<dir>" to clone from a mounted live-usb or iso-file.

At least one command must be given.  If "all" is not given then only the
commands given will be run.

Commands:
    sizes            Only show and check sizes, don't do anything
    all              Do all commands below
    partition        Partition the live usb
    makefs-ext       Create the ext file system
    makefs-fat       Create the fat file system
    makefs           Both makefs-ext and makefs-fat
    copy-ext         Copy files to live usb ext partition
    copy-fat         Copy files to fat partition
    copy             Both copy-ext and copy-fat
    uuids            Write UUIDs linking file systems
    install

Options:
  -c --clear        Delete files from each partition before copying
  -d --debug        Pause before cleaning up
  -e --esp-size=XX  Size of ESP (fat) partition in MiB (default 50)
  -f --force        Ignore usb/removeable check (dangerous!)
  -F --force-ext    Force creation of ext4 filesystem even if one exists
  -g --gpt          Use gpt partitioning instead of msdos
  -h --help         Show this usage
  -L --label=Name   Label ext partition with Name
  -p --pretend      Don't run most commands, just show them
  -P --Pretend      Pretend witout verbose
  -q --quiet        Print less
  -s --size=XX      Percent of usb-device to use in (default 100)
  -v --verbose      Print more, show commands when run

Notes:
  - short options stack. Example: -Ff instead of -F -f
  - options can be intermingled with commands and parameters
  - config file: $CONF_FILE
  - the config file will be sourced if it exists
  - it will be created if it doesn't exist
Usage
    exit $ret
}

eval_argument() {
    local arg=$1 val=$2
        case $arg in
             -clear|c)  CLEAR=true                      ;;
             -debug|d)  DEBUG=true                      ;;
          -esp-size|e)  FAT_SIZE=$val                   ;;
      -esp-size=*|e=*)  FAT_SIZE=$val                   ;;
             -force|f)  FORCE=true                      ;;
         -force-ext|F)  FORCE_EXT="-F"                  ;;
               -gpt|g)  MBR_GPT="gpt"                   ;;
              -help|h)  usage                           ;;
             -label|L)  EXT_LABEL=$val                  ;;
         -label=*|L=*)  EXT_LABEL=$val                  ;;
           -pretend|p)  PRETEND=true ; VERBOSE=true     ;;
           -Pretend|P)  PRETEND=true ; VERBOSE=         ;;
             -quiet|q)  QUIET=true                      ;;
              -size|s)  SIZE=${val%\%}                  ;;
          -size=*|s=*)  SIZE=${val%\%}                  ;;
           -verbose|v)  VERBOSE=true                    ;;
                    *)  fatal "Unknown parameter -$arg" ;;
    esac
}

takes_param() {
    case $1 in
    -esp-size|e) return 0 ;;
        -size|s) return 0 ;;
       -label|L) return 0 ;;
    esac
    return 1
}

main() {
    local SHIFT SHORT_STACK="cdefFghLpPqsv"
    local VERBOSE ISO_FILE DEVICE

    local START_T=$(date +%s)

    local orig_args="$*"

    test -r "$CONF_FILE" && . "$CONF_FILE"

    [ $# -eq 0 ] && usage

    # This loop allows complete intermingling of filenames and options
    local opt_cnt=0
    while [ $# -gt 0 ]; do
        read_params "$@"
        shift $SHIFT

        while [ $# -gt 0 -a ${#1} -gt 0 -a -n "${1##-*}" ]; do
            case $opt_cnt in
                0) ISO_FILE=$1     ;;
                1) DEVICE=$1       ;;
                *) CMDS="$CMDS $1" ;;
            esac
            shift
            opt_cnt=$((opt_cnt + 1))
        done
    done

    [ $opt_cnt -lt 2 ] && fatal "Expected at least two command line arguments"

    [ $UID -eq 0 ] || fatal "This script must be run as root"

    [ "$PRETEND" ] && msg "PRETEND MODE ENABLED"

    case $SIZE in
        [1-9]|[0-9][0-9]|100) ;;
        *) fatal "Bad size format \"%s\".  Should be between 1 and 100 inclusive." "$(pqh $SIZE)"
    esac

    [ -z "${FAT_SIZE##[0-9]}" ] && fatal "esp-size must be larger than 9"
    echo $FAT_SIZE | egrep -q "^[1-9][0-9]+$" || fatal "esp-size must be an integer larger than 9"

    # Write config file if one does not already exist
    test -e "$CONF_FILE" || write_conf "$CONF_FILE"

    # Test for valid commands
    local cmd
    for cmd in $CMDS; do
        echo "$ALL_CMDS" | egrep -q "(^| )$cmd( |$)" || fatal "Unknown command: $cmd"
    done

    local usb_dev=$(expand_device $DEVICE) || fatal "Could not find device $DEVICE"

    test -e $usb_dev || fatal "Device $usb_dev does not exist"
    test -b $usb_dev || fatal "Device $usb_dev is not a block device"

    local ext_dev=$(get_partition $usb_dev 1)
    local fat_dev=$(get_partition $usb_dev 2)

    [ "$FORCE" ] || is_usb_or_removeable $usb_dev \
        || fatal "$usb_dev does not seem to be usb or removeable.  Use --force"

    start_log "$orig_args" "$CMDS" "$ISO_FILE" "$usb_dev"

    trap clean_up EXIT
    WORK_DIR=$(mktemp -d /tmp/$ME-XXXX) \
        || fatal "Could not make temporary work directory under /tmp"

    chmod 755 $WORK_DIR

    ISO_DIR=$WORK_DIR/iso
    EXT_DIR=$WORK_DIR/ext
    FAT_DIR=$WORK_DIR/fat

    mkdir $ISO_DIR $EXT_DIR $FAT_DIR || fatal "Could not make $WORK_DIR subdirectories"

    mount_iso "$ISO_FILE" $ISO_DIR || fatal "Could not mount iso file $ISO_FILE"

    local total_size=$(parted $usb_dev unit MiB print | sed -rn "s/^Disk.*: ([0-9]+)MiB$/\1/p")
    local mib_size=$((total_size * SIZE / 100 - 1))
    local ext_size=$((mib_size - FAT_SIZE))
    local ext_needed=$(du_size $ISO_DIR/*)
    local fat_needed=$(du_size $ISO_DIR/{boot,EFI,efi})
    local ext_extra=$((ext_size - ext_needed))
    local fat_extra=$((FAT_SIZE - fat_needed))

    local mem_fmt="%20s:$white %7s$msg_co MiB"

    msg "$mem_fmt" "total size"     $total_size
    msg "$mem_fmt" "requested size" $mib_size
    msg "$mem_fmt" "ext available"  $ext_size
    msg "$mem_fmt" "ext needed"     $ext_needed
    msg "$mem_fmt" "ext extra"      $ext_extra
    msg "$mem_fmt" "fat available"  $FAT_SIZE
    msg "$mem_fmt" "fat needed"     $fat_needed
    msg "$mem_fmt" "fat extra"      $fat_extra
    msg

    if [ ${#CMDS} -le 0 ]; then
        echo -e "No command(s) given.  Try \"all\"."
        exit 0
    fi

    check_size ext $ext_extra $EXT_MARGIN
    check_size fat $fat_extra $FAT_MARGIN

    echo "$CMNDS" | egrep -q "(^| )sizes( |$)" && exit 0

    cmd umount_all $usb_dev

    need partition && do_partition "$usb_dev" "$MBR_GPT" $ext_size $mib_size

    need makefs-ext && do_makefs_ext $ext_dev
    need makefs-fat && do_makefs_fat $fat_dev

    my_mount $ext_dev $EXT_DIR
    my_mount $fat_dev $FAT_DIR

    need copy-ext && do_copy_ext $ISO_DIR $EXT_DIR
    need copy-fat && do_copy_fat $ISO_DIR $FAT_DIR

    local ext_uuid=$(lsblk -no uuid $ext_dev)
    local fat_uuid=$(lsblk -no uuid $fat_dev)

    need uuids   && do_uuids $EXT_DIR "$ext_uuid" "$FAT_DIR/$GRUB_CONF" "$fat_uuid"
    need install && do_install $usb_dev $EXT_DIR $MBR_GPT

    show_elapsed
}

mount_iso() {
    local file=$1  dir=$2
    mkdir -p $dir

    case $file in
        live) mount_live $dir              ; return ;;
      live=*) mount_live $dir "${file#*=}" ; return ;;
    esac

    test -e "$file" || fatal "Could not find iso file $file"
    test -r "$file" || fatal "Could not read iso file $file"

    local type
    for type in iso9660 udf; do
        mount -t $type -o loop,ro "$file" $dir && return 0
    done
    fatal "Could not mount iso file $file"
}

mount_live() {
    local targ_dir=$1  live_dir=${2:-$LIVE_MP}

    test -d "$live_dir"       || fatal "Live directory \"$live_dir\" is not a directory"
    is_mountpoint "$live_dir" || fatal "Live directory \"$live_dir\" is not a mountpoint"

    mount --bind $targ_dir $targ_dir

    # NOTE:
    # the cd && eval "ls ..." allows us to use globbing expansions with spaces in paths

    local dir from dest
    while read dir; do
        from="$live_dir/$dir"
        dest="$targ_dir/$dir"
        test -d "$from" || continue
        mkdir -p "$dest" || fatal "Could not create directory $dest"
        mount --bind "$from" "$dest"
    done <<Live_Dirs
$(cd "$live_dir" && eval "ls -d $LIVE_DIRS" 2>/dev/null)
Live_Dirs

    local file
    while read file; do
        from="$live_dir/$file"
        dest="$targ_dir/$file"
        test -f "$from" || continue
        mkdir -p "$(dirname "$dest")" || fatal "Could not mkdir $(dirname "$dest")"
        touch "$dest"                 || fatal "Could not touch file $dest"
        mount --bind "$from" "$dest"
    done <<Live_Files
$(cd "$live_dir" && eval "ls -d $LIVE_FILES" 2>/dev/null)
Live_Files
}

my_mount() {
    local dev=$1  dir=$2
    PRETEND= cmd mount $dev $dir || fatal "Could not mount $dev at $dir"
    is_mountpoint $dir || fatal "Failed to mount $dev at $dir"
}

do_partition() {
    local drive=$1  type=${2:-msdos}  ext_size=$3  mib_size=$4

    local boot_flag
    case $type in
          gpt) boot_flag=legacy_boot ;;
        msdos) boot_flag=boot        ;;
            *) fatal "Unknown partitioning scheme: $type.  Expected msdos or gpt" ;;
    esac

    cmd parted --script --align optimal $usb_dev   \
        unit MiB                                   \
        mklabel $type                              \
        mkpart primary ext4  1         $ext_size   \
        mkpart primary fat32 $ext_size $mib_size   \
        set 1 $boot_flag on                        \
        set 2 esp  on
}

do_makefs_ext() {
    local ext_dev=$1
    cmd mkfs.ext4 $FORCE_EXT $EXT_OPTIONS -L "$EXT_LABEL" $ext_dev \
        || fatal "Could not make ext4 file system on $ext_dev"
}

do_makefs_fat() {
    local fat_dev=$1
    cmd mkfs.fat -n "LIVE-ESP" $fat_dev \
        || fatal "Could not make fat32 file system on $fat_dev"
}

do_copy_ext() {
    local iso_dir=$1  ext_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $ext_dir/*

    if [ -z "$FORCE" -a -d $ext_dir/antiX ]; then
        warn "Not over-writing ext partition due to existing antiX/ directory"
        warn "Use --clear or --force to over-write"
        return
    fi
    msg "Copying files ..."
    cmd cp -a $iso_dir/* $ext_dir/ || fatal "Error when copying files to live usb"
    sync
}

do_copy_fat() {
    local iso_dir=$1  fat_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $fat_dir/*

    local top
    for top in $iso_dir/{efi,EFI,boot}; do
        test -e $top || continue
        cmd cp -r $top $fat_dir/ \
            || warn "Error when copying %s files to fat partition" $(basename $top)
    done
}

do_uuids() {
    local ext_dir=$1  ext_uuid=$2  grub_cfg=$3  fat_uuid=$4
    if [ ${#fat_uuid} -gt 0 ]; then
        local fat_file=$ext_dir/antiX/esp-uuid
        cmd mkdir -p $(dirname $fat_file) || fatal "Making directory $(dirname $fat_file) failed"
        cmd write_file $fat_file $fat_uuid
    else
        warn "No UUID given for fat partition"
    fi

    if [ ${#ext_uuid} -eq 0 ]; then
        warn "No UUID give for ext4 partition"
        return
    fi

    if ! test -e $grub_cfg; then
        warn "Could not find $(basename $grub_cfg) file"
        return
    fi

    local new_line="search --no-floppy --set=root --fs-uuid $ext_uuid"
    if grep -q "search.*--set=root.*" $grub_cfg; then
        # Replace the line(s) if it/they exists
        cmd sed -i "/search.*--set=root.*/  s/.*/$new_line/" $grub_cfg \
            || fatal "sed on $(basename $grub_cfg) failed"
    else
        # Add the new line before the first menuentry line if not
        cmd sed -ri "1,/^\s*menuentry/s/(^\s*menuentry)/$new_line\n\n\1/" $grub_cfg \
            || fatal "sed on $(basename $grub_cfg) failed"
    fi
}

do_install() {
    local usb_dev=$1  ext_dir=$2  type=$3

    local fname
    case $type in
          gpt) fname=gptmbr.bin ;;
        msdos) fname=mbr.bin    ;;
            *) fatal "Unknown partitioning scheme: $type.  Expected msdos or gpt" ;;
    esac

    local dir file d
    for dir in /usr/share/syslinux /usr/lib/syslinux/mbr; do
        test -e $dir/$fname || continue
        file=$dir/$fname
        break
    done

    [ "$file" ] || fatal "Could not find file $fname"
    cmd dd bs=440 conv=notrunc count=1 if=$file of=$usb_dev || fatal "dd command failed"

    cmd extlinux -i $ext_dir/boot/syslinux || fatal "extlinux command failed"
}

need() {
    local cmd=$1  cmd2=${1%%-*}
    echo "$CMDS" | egrep -q "(^| )($cmd|$cmd2|all)( |$)" || return 1
    msg "=> $cmd"
    return 0
}

write_file() {
    file=$1
    shift
    echo "$*" > $file
}

is_usb_or_removeable() {
    local drive=$(get_drive $1)
    local dir=/sys/block/$drive flag
    read flag 2>/dev/null < $dir/removable
    [ "$flag" = 1 ] && return 0
    local devpath=$(readlink -f $dir/device)
    [ "$devpath" ] || return 1
    echo $devpath | grep -q /usb
    return $?
}

get_drive() {
    local drive part=${1##*/}
    case $part in
        mmcblk*) echo ${part%p[0-9]}                        ;;
              *) drive=${part%[0-9]}  ; echo ${drive%[0-9]} ;;
    esac
}

expand_device() {
    case $1 in
        /dev/*)  [ -b "$1"      ] && echo "$1";;
         dev/*)  [ -b "/$1"     ] && echo "/$1";;
            /*)  [ -b "/dev$1"  ] && echo "/dev$1";;
             *)  [ -b "/dev/$1" ] && echo "/dev/$1";;
    esac
}

umount_all() {
    local dev=$1
    local i part

    for part in $(mount | egrep -o "^$dev[^ ]*"); do
        umount --all-targets $part 2>/dev/null
    done
    mount | egrep -q "^$dev[^ ]*" || return

    for i in $(seq 1 10); do
        mount | egrep -q "^$dev[^ ]*" || return
        for part in $(mount | egrep -o "^$dev[^ ]*"); do
            umount $part 2>/dev/null
        done
        sleep .1
    done
    local mounted=$(mount | egrep "^$dev[^ ]*" | cut -d" " -f3) || return
    fatal "One or more partitions on device $dev are in use at: $(echo $mounted)"
}

get_partition() {
    local dev=$1  num=$2

    case $dev in
        *mmcbk*) echo  ${dev}p$num  ;;
              *) echo  ${dev}$num   ;;
    esac
}

#-------------------------------------------------------------------------------
# Send "$@".  Expects
#
#   SHORT_STACK               variable, list of single chars that stack
#   fatal(msg)                routine,  fatal("error message")
#   takes_param(arg)          routine,  true if arg takes a value
#   eval_argument(arg, [val]) routine,  do whatever you want with $arg and $val
#
# Sets "global" variable SHIFT to the number of arguments that have been read.
#-------------------------------------------------------------------------------
read_params() {
    # Most of this code is boiler-plate for parsing cmdline args
    SHIFT=0
    # These are the single-char options that can stack

    local arg val

    # Loop through the cmdline args
    while [ $# -gt 0 -a ${#1} -gt 0 -a -z "${1##-*}" ]; do
        arg=${1#-}
        shift
        SHIFT=$((SHIFT + 1))

        # Expand stacked single-char arguments
        case $arg in
            [$SHORT_STACK][$SHORT_STACK]*)
                if echo "$arg" | grep -q "^[$SHORT_STACK]\+$"; then
                    local old_cnt=$#
                    set -- $(echo $arg | sed -r 's/([a-zA-Z])/ -\1 /g') "$@"
                    SHIFT=$((SHIFT - $# + old_cnt))
                    continue
                fi;;
        esac

        # Deal with all options that take a parameter
        if takes_param "$arg"; then
            [ $# -lt 1 ] && fatal "Expected a parameter after: -$arg"
            val=$1
            [ -n "$val" -a -z "${val##-*}" ] \
                && fatal "Suspicious argument after -$arg: $val"
            SHIFT=$((SHIFT + 1))
            shift
        else
            case $arg in
                *=*)  val=${arg#*=} ;;
                  *)  val="???"     ;;
            esac
        fi

        eval_argument "$arg" "$val"
    done
}

cmd() {
    echo " > $*" >> $LOG_FILE
    [ "$VERBOSE" ] && echo " >" "$@" | sed "s|$WORK_DIR|.|g"
    [ "$PRETEND" ] && return 0
    "$@" 2>&1 | tee -a $LOG_FILE
    # Warning: Bashism
    return ${PIPESTATUS[0]}
}

check_size() {
    local type=$1  extra=$2  margin=$3
    [ $extra -lt 0 ] && fatal "Not enough space on $type partition"
    [ $extra -lt $margin ] && fatal "Less than $margin MiB would remain on $type partition"
}

du_size() {
    du --apparent-size -scm "$@" 2>/dev/null | tail -n 1 | cut -f1
}

set_colors() {
    local noco=$1  loco=$2

    local e=$(printf "\e")
     black="$e[0;30m";    blue="$e[0;34m";    green="$e[0;32m";    cyan="$e[0;36m";
       red="$e[0;31m";  purple="$e[0;35m";    brown="$e[0;33m"; lt_gray="$e[0;37m";
   dk_gray="$e[1;30m"; lt_blue="$e[1;34m"; lt_green="$e[1;32m"; lt_cyan="$e[1;36m";
    lt_red="$e[1;31m"; magenta="$e[1;35m";   yellow="$e[1;33m";   white="$e[1;37m";
     nc_co="$e[0m";

    cheat_co=$white;      err_co=$red;       hi_co=$white;
      cmd_co=$white;     from_co=$lt_green;  mp_co=$magenta;   num_co=$magenta;
      dev_co=$magenta;   head_co=$yellow;     m_co=$lt_cyan;    ok_co=$lt_green;
       to_co=$lt_green;  warn_co=$yellow;  bold_co=$yellow;
}

pq()     { echo "$hi_co$*$m_co"           ;}
pqw()    { echo "$hi_co$*$warn_co"        ;}
pqe()    { echo "$hi_co$*$err_co"         ;}
pqh()    { echo "$m_co$*$hi_co"           ;}

show_elapsed() {
    local dt=$(($(date +%s) - START_T))
    [ $dt -gt 10 ] && msg "\n$ME took $(elapsed $START_T)."
    msg "=> cleaning up"
    echo >> $LOG_FILE
}

elapsed() {
    local sec min hour ans

    sec=$((-$1 + $(date +%s)))

    if [ $sec -lt 60 ]; then
        plural $sec "%n second%s"
        return
    fi

    min=$((sec / 60))
    sec=$((sec - 60 * min))
    if [ $min -lt 60 ]; then
        ans=$(plural $min "%n minute%s")
        [ $sec -gt 0 ] && ans="$ans and $(plural $sec "%n second%s")"
        echo -n "$ans"
        return
    fi

    hour=$((min / 60))
    min=$((min - 60 * hour))

    plural $hour "%n hour%s"
    if [ $min -gt 0 ]; then
        local min_str=$(plural $min "%n minute%s")
        if [ $sec -gt 0 ]; then
            echo -n ", $min_str,"
        else
            echo -n " and $min_str"
        fi
    fi
    [ $sec -gt 0 ] && plural $sec " and %n second%s"
}

plural() {
    local n=$1 str=$2
    case $n in
        1) local s=  ies=y   are=is   were=was  es= num=one;;
        *) local s=s ies=ies are=are  were=were es=es num=$n;;
    esac
    case $n in
        0) num=no
    esac
    echo -n "$str" | sed -e "s/%s\>/$s/g" -e "s/%ies\>/$ies/g" \
        -e "s/%are\>/$are/g" -e "s/%n\>/$num/g" -e "s/%were\>/$were/g" \
        -e "s/%es\>/$es/g" -e "s/%3d\>/$(printf "%3d" $n)/g"
}


msg() {
    local fmt=$1  e=$(printf "\e")
    shift
    printf "$fmt\n" "$@" | sed -r "s/$e\[[0-9;]+[mK]//g" >> $LOG_FILE
    [ -z "$QUIET" ] && printf "$m_co$fmt$nc_co\n" "$@"
}

fatal() {
    local fmt=$1
    shift
    printf "$fmt\n" "$@" >> $ERR_FILE
    printf "${err_co}Fatal error:$hi_co $fmt$nc_co\n" "$@" >&2
    printf "${err_co}Fatal error:$hi_co $fmt$nc_co\n" "$@" >> $LOG_FILE

    show_elapsed

    exit 2
}

warn() {
    local fmt=$1
    shift
    printf "${warn_co}Warning:$hi_co $fmt$nc_co\n" "$@" >&2
    printf "${warn_co}Warning:$hi_co $fmt$nc_co\n" "$@" >> $LOG_FILE
}

write_conf() {
    local file=$1

    mkdir -p $(dirname $file)
    msg
    msg "Writing config file at $file"
    msg

    cat<<Conf_File > $file
# $(basename $file)
#
# This file will be sourced by the live-usb-maker script if it is found
# at $file

     MBR_GPT="$MBR_GPT"
        SIZE=$SIZE
    FAT_SIZE=$FAT_SIZE
  EXT_MARGIN=$EXT_MARGIN
  FAT_MARGIN=$FAT_MARGIN

 EXT_OPTIONS="$EXT_OPTIONS"
   EXT_LABEL="$EXT_LABEL"

     LIVE_MP="$LIVE_MP"
  LIVE_FILES="$LIVE_FILES"
   LIVE_DIRS="$LIVE_DIRS"

   GRUB_CONF="$GRUB_CONF"
      CHEATS=""
Conf_File
}

is_mountpoint() {
    local file=$1
    cut -d" " -f2 /proc/mounts | grep -q "^$(readlink -f $file)$"
    return $?
}

start_log() {
    local args=$1 cmds=${2# } iso=$3 dev=$4

    LOG_FILE=$THE_LOG_FILE
    ERR_FILE=$THE_ERR_FILE

    rm -f $ERR_FILE

    cat <<Start_Log >> $LOG_FILE
---------------------------------------------------------------------
$ME
    started: $(date)
comand line: $args
   commands: $cmds
   iso file: $iso
     device: $dev
     cheats: $CHEATS

Start_Log
}

clean_up() {
    #msg "cleaning up"

    # Note: waiting for user input inside extt routine is bad
    if [ "$DEBUG" ]; then
        echo -n "${green}Press <Enter>$nc_co "
        read x
    fi

    sync; sync
    for mp in $ISO_DIR $EXT_DIR $FAT_DIR; do
        is_mountpoint $mp && umount -r -l $mp
        if ! is_mountpoint $mp; then
            rm -rf $mp
        else
            warn "$mp remains mounted"
            continue
        fi
    done
    rmdir $WORK_DIR
}

set_colors

main "$@"

