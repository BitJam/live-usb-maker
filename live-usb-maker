#!/bin/bash

        ME=${0##*/}
    MY_DIR=$(dirname "$(readlink -f $0)")
MY_LIB_DIR=$(readlink -f "$MY_DIR/../cli-shell-utils")
   LIB_DIR="/usr/local/lib/cli-shell-utils"

#== BEGIN_CONFIG

          NO_QUIT="true"  # for testing part of the UI

     ISO_FILE_DIR="%USER_HOME%"
    ISO_FILE_SPEC="*.iso"
      SEARCH_DIRS="%USER_HOME% /media /root"
     SEARCH_DEPTH="4"
        MAX_FILES="20"
     MIN_ISO_SIZE="180M"

        MSDOS_GPT="gpt"
     DEFAULT_SIZE="100%"
         CMD_SIZE=""
         FAT_SIZE="50"
       EXT_MARGIN="20"
       FAT_MARGIN="5"

     EXT4_OPTIONS="-m0 -i100000 -J size=32"
       EXT4_LABEL="LiveUSB"

          LIVE_MP="/live/boot-dev"
     LINUXFS_NAME="linuxfs"
 MIN_LINUXFS_SIZE="120M"
     DEF_BOOT_DIR="/antiX"

       CLONE_DIRS="boot EFI efi"
      CLONE_FILES="cdrom.ico version"
 CLONE_BDIR_FILES="{vmlinuz,vmlinuz1,initrd.gz,linuxfs}{,.md5}"

        GRUB_CONF="boot/grub/grub.cfg"
           CHEATS=""
     COLOR_SCHEME="high"
    QUESTION_MODE="default"

#== END_CONFIG

         WORK_DIR="/run/$ME"
        LOCK_FILE="/run/lock/$ME"
        SHELL_LIB="cli-shell-utils.bash"
      CONFIG_FILE="/root/.config/$ME/$ME.conf"
     THE_LOG_FILE="/var/log/$ME.log"
     THE_ERR_FILE="/var/log/$ME.errors"
         LOG_FILE="/dev/null"
         ERR_FILE="/dev/null"

ORDERED_CMDS="partition makefs makefs-ext makefs-fat copy copy-ext copy-fat"
ORDERED_CMDS="$ORDERED_CMDS uuids cheats cheats-syslinux cheats-grub install"
    ALL_CMDS="sizes all $ORDERED_CMDS"
    PRE_CMDS="partition makefs"
   POST_CMDS="uuids cheats install"

   ALL_FORCE="copy,flock,makefs,umount,usb"

    LIB_PATH="$MY_LIB_DIR:$LIB_DIR"
        PATH="$MY_LIB_DIR/bin:$LIB_DIR/bin:$PATH"

usage() {
    local ret=${1:-0}

cat<<Usage
Usage: $ME [commands]

Create a live-usb from an iso-file, another live-usb, a live-cd/dvd
or a running live system.  You will be prompted for information that
is not supplied in the command line options.

Use "default" to default "no" to some questions.
Use "expert"  to default "yes" to some questions.
use "simple"  to skip some questions

Uses ext4 as the filesystem for the main live-usb partition and adds
a small fat32 file system for booting via UEFI.

This will destroy any existing information on <usb-device>.  The default
partitioning scheme is GPT.  Use --msdos flag to use msdos partitioning
instead.

  --from="iso-file"    Enter an iso file to use as the source
  --from="clone"       clone a running live system.
  --from=clone=<dir>   clone from a mounted live-usb or iso-file.
  --from=<dev>         copy from a livecd/dvd or live-usb

Options:
  -c --cheat=xxx        Add these cheatcodes to the live-usb
                           Use "off" or "no" to disable cheats menu.
                           Use "on" or "yes"  to show cheat menus without asking

                        Otherwise you will be asked.
     --color=<xxx>      Set color scheme to off|low|high
  -C --clear            Delete files from each partition before copying
  -D --debug            Pause before cleaning up
  -e --esp-size=<xx>    Size of ESP (fat) partition in MiB (default 50)
  -E --ext-options=<xx> Use these options when creating the ext4 filesystem

  -f --from=<xxx>       The device, cdrom, or file to make the live-usb from
                        Use "clone" to clone the current live system or use
                        clone=<xxx> to clone another live-usb

  -F --force=<xxx>      Force the options specfied:
                            umount: Allows try to umount all partitions on drive
                               usb: Ignore usb/removable check
                            makefs: Make the ext4 filesystem even if one exists
                              copy: Overwrite ext4 partition even if antiX/ exists
                               all: All of the above (dangerous!)

  -g --gpt              Use gpt partitioning (default) instead of msdos
  -h --help             Show this usage
  -I --ignore-config    Ignore the configuration file
  -L --label=Name       Label ext partition with Name
  -m --msdos            Use msdos partitioning instead of gpt
  -p --pretend          Don't run most commands
  -q --quiet            Print less
  -R --reset-config     Write a fresh config file with default options
  -s --size=XX          Percent of usb-device to use (default 100)
  -t --target=<xxx>     The device to make into a new live-usb
  -v --verbose          Print more, show commands when run
  -W --write-config     Write a config file preserving current options

Notes:
  - short options stack. Example: -pv is the same as --pretend --verbose
  - options can be intermingled with commands and parameters
  - config file: $CONFIG_FILE
  - the config file will be sourced if it exists
  - it will be created if it doesn't exist
Usage
    exit $ret
}

eval_early_argument() {
    case $1 in
      -ignore-config|I) IGNORE_CONFIG=true   ;;
       -write-config|W)  WRITE_CONFIG=true   ;;
       -reset_config|R)  RESET_CONFIG=true   ;;
               -help|h) usage                ;;
    esac
}

eval_argument() {
    local arg=$1  val=$2
        case $arg in
             -cheat|c)  CHEATS="$CHEATS${CHEATS:+ }$val" ;;
             -cheat=*)  CHEATS="$CHEATS${CHEATS:+ }$val" ;;
             -clear|C)  CLEAR=true                       ;;
               -color)  COLOR_SCHEME=$val                ;;
             -color=*)  COLOR_SCHEME=$val                ;;
             -debug|D)  DEBUG=true                       ;;
          -esp-size|e)  FAT_SIZE=$val                    ;;
       -ext-options|E)  EXT4_OPTIONS=$val                ;;
       -ext-options=*)  EXT4_OPTIONS=$val                ;;
          -esp-size=*)  FAT_SIZE=$val                    ;;
              -from|f)  FROM=$val                        ;;
              -from=*)  FROM=$val                        ;;
             -force|F)  FORCE="$FORCE,$val"              ;;
             -force=*)  FORCE="$FORCE,$val"              ;;
               -gpt|g)  MSDOS_GPT="gpt"                  ;;
             -label|L)  EXT4_LABEL=$val                  ;;
             -label=*)  EXT4_LABEL=$val                  ;;
             -msdos|m)  MSDOS_GPT="msdos"                ;;
           -pretend|p)  PRETEND_MODE=true                ;;
             -quiet|q)  QUIET=true                       ;;
              -size|s)  CMD_SIZE=${val%\%}               ;;
              -size=*)  CMD_SIZE=${val%\%}               ;;
            -target|t)  TARGET=$val                      ;;
            -target=*)  TARGET=$val                      ;;
           -verbose|v)  BE_VERBOSE=true                  ;;

       # These are read early.  They are not unknown
     -ignore-config|I)                                   ;;
      -reset-config|R)                                   ;;
      -write-config|W)                                   ;;

               *)  fatal $"Unknown parameter %s" "-$arg" ;;
    esac
}

assign_parameter() {
    local cnt=$1 param=$2
   case $param in
       default) QUESTION_MODE=default  ;;
        expert) QUESTION_MODE=expert   ;;
        simple) QUESTION_MODE=simple   ;;
             *) CMDS="$CMDS $param"    ;;
    esac
}

takes_param() {
    case $1 in
       -cheat|c) return 0 ;;
    -esp-size|e) return 0 ;;
        -from|f) return 0 ;;
       -force|F) return 0 ;;
       -label|L) return 0 ;;
        -size|s) return 0 ;;
      -target|t) return 0 ;;
    esac
    return 1
}

main() {
    local SHIFT SHORT_STACK="cCDeEfFghILmpqRstvW"
    local BE_VERBOSE FROM TARGET FATAL_QUESTION CMD PARAM_CNT
    local START_T=0
    set_colors

    local orig_args="$*"

    # Let non-root users get usage.  Need to get --ignore-config early.
    read_early_params "$@"

    need_root
    EXIT_NUM=100

    read_reset_config_file "$CONFIG_FILE"

    ERR_FILE=$THE_ERR_FILE

    trap clean_up EXIT

    do_flock $LOCK_FILE $ME

    rm -f $ERR_FILE

    if [ -z "$IGNORE_CONF" ]; then
        test -r "$CONFIG_FILE" && . "$CONFIG_FILE"
        test -e "$CONFIG_FILE" || write_conf "$CONFIG_FILE"
    fi

    read_all_cmdline_mingled "$@"
    set_colors $COLOR_SCHEME

    #-- if [ -z "$QUESTION_MODE" ]; then
    #--     QUESTION_MODE=expert
    #--     YES_no $"Use default mode (fewer questions)?" && QUESTION_MODE=default
    #--     msg "Using %s mode" "$(pq $QUESTION_MODE)"
    #-- fi

    #-- if [ "$QUESTION_MODE" = default ]; then
    #--     CMD_SIZE=100
    #--     CHEATS=no
    #-- else
    #--    : #CHEATS=yes
    #-- fi

    : ${CMDS:=all}

    check_cmds  CMDS  "$ALL_CMDS" "$ORDERED_CMDS"
    check_force FORCE "$ALL_FORCE"

    local percent_size=${CMD_SIZE%%%}
    case $percent_size in
        "") ;;
        [1-9]|[0-9][0-9]|100) ;;
        *) fatal $"Wrong percentage value '%s'.  Should be between %s and %s inclusive." "$(pqh $percent_size)" "1%" "100%"
    esac

    [ -z "${FAT_SIZE##[0-9]}" ] && fatal $"esp-size must be larger than %s" 9
    echo $FAT_SIZE | egrep -q "^[1-9][0-9]+$" || fatal $"esp-size must be an integer larger than %s" 9

    # Always write a new config file and then exit if requested
    [ "$WRITE_CONFIG" ] && write_config "$CONFIG_FILE" && exit 0

    start_log "$orig_args" "$CMDS"

    shout_pretend

    mkdir -p $WORK_DIR || fatal $"Could not make a work directory under /tmp"
    mount -t tmpfs tmpfs $WORK_DIR || fatal $"Could not mount tmpfs at %s" $WORK_DIR
    # Set up our directories.  These a GLOBALS so they can be used in clean_up() on exit
    ISO_DIR=$WORK_DIR/iso
    EXT_DIR=$WORK_DIR/ext
    FAT_DIR=$WORK_DIR/fat
    MNT_DIR=$WORK_DIR/live-dev

    mkdir $ISO_DIR $EXT_DIR $FAT_DIR || fatal $"Could not make %s subdirectories" "$WORK_DIR"

    #--- Find live boot device if we are running live

    local we_are_live live_dev
    if its_alive; then
        we_are_live=true
        # FIXME: should use initrd.out to get the uuid, etc
        live_dev=$(get_live_dev)
        warn_z "$live_dev" $"The live media is not mounted"
    fi

    # Check cmdline target *before* the first menu
    if [ ${#TARGET} -eq 0 ]; then
        select_target_device TARGET "$live_dev"
    else
        check_target "$TARGET" "$live_dev"
    fi
    msg "Will use target device %s" "$(pq $TARGET)"

    local from
    if [ ${#FROM} -gt 0 ]; then
        check_from from "$FROM" "$TARGET"
    else
    #--- Select source of live-usb if one was not given
        select_usb_src from "$TARGET"
    fi

    local from_label from_file from_act=copying
    case $from in
        iso-file|iso|file)
            cli_get_filename from_file "Please enter the filename" "$ISO_FILE_DIR"
            from=file=$from_file ;;

        clone)
            mk_from_label  $"by cloning live system %s" "$live_dev"
            from=clone=$LIVE_MP ;;

        dev=*|clone=*|file=*)   ;;

        *) test -f "$from" && from=file=$from ;;
    esac

    [ -n "$from" -a -n "${from%%*=*}" ] &&* fatal "Internal error 1: bad from value: %s" "$from"

    local from_type=${from%%=*}
    local from_value=${from#*=}

    # The $from variable must be type=value as seen below.  This is more
    # Complicated but it makes it easier to report to user what is going on
    local from_dev from_thing
    case $from_type in
        file)
            mount_iso_file "$from_value" "$ISO_DIR"
            check_md5 "$from_value"
            mk_from_label $"from file %s" "$from_value"
            from_thing=file
            ;;

        dev)
            mount_device "$from_value" "$ISO_DIR"
            mk_from_label $"copy device %s" "$from_value"
            from_thing=device
            ;;

        clone)
            # First see if we were given a block device to clone
            local from_dev=$(expand_device "$from_value")
            from_act=cloning

            # Just clone the directory instead if the device is already mounted
            if is_mounted "$from_dev"; then
                from_value=$(grep "^$from_dev " /proc/mounts | cut -d" " -f2 | head -n1)
                msg "Will trying cloning directory %s" "$(pq "$from_value")"
                from_dev=

            fi

            if [ ${#from_dev} -gt 0 ]; then
                mk_from_label $"by cloning device %s" "$from_dev"
                mount_device    "$from_dev" "$MNT_DIR"
                clone_directory "$MNT_DIR"  "$ISO_DIR"
                from_thing=device

            elif test -d "$from_value"; then
                mk_from_label $"by cloning directory %s" "$from_value"
                clone_directory "$from_value" "$ISO_DIR"
                from_thing=directory

            else
                fatal "Can only clone devices and directories, not '%s" "$from_value"
            fi
            ;;
        *)
            fatal "Internal error 2.  Bad from variable '%s" "$from"
            ;;
    esac

    msg "Will use source %s" "$from_thing $(pq $from_value)"
    show_distro_version "$ISO_DIR" # "$from_value"


    # Make sure our target is a real device
    local target_dev=$(expand_device $TARGET)
    [ ${#target_dev} -gt 0 ] || fatal $"Could not find device %s" "$TARGET"

    local cheats
    case $CHEATS in
        "") expert_YES_no "Customize language and timezone?"  && cheats_menus cheats ;;
    off|no) ;;
    yes|on) cheats_menus cheats ;;
         *) cheats=$CHEATS      ;;
    esac

    # This are mostly for a manually entered target
    test -e $target_dev || fatal $"Target device %s does not exist" $target_dev
    test -b $target_dev || fatal $"Target device %s is not a block device" $target_dev

    # Require that an entire disk device be specified (could relax?)
    local dev_type=$(lsblk -no type --nodeps $target_dev)
    [ "$dev_type" = "disk" ] || fatal $"Device %s is not a disk device" $target_dev

    # Get first to partitions (lexically only)
    local ext_dev=$(get_partition $target_dev 1)
    local fat_dev=$(get_partition $target_dev 2)

    # fatal "The device %s does not seem to be usb or removable."
    # FIXME: move this to the lib?
    force usb || is_usb_or_removable $target_dev || yes_NO_fatal "usb" \
        $"Do you want to use it anyway (dangerous)?" \
        $"Use %s to always ignore this warning"      \
        $"The device %s does not seem to be usb or removeable."  "$target_dev"

    local mib_size ext_size
    verify_sizes mib_size ext_size "$target_dev"  "$ISO_DIR" "$percent_size" "$FAT_SIZE" "${DEFAULT_SIZE%%%}"

    [ ${#cheats} -gt 0 ] && msg "Cheats: %s" "$(pq $cheats)"
    # Bail early if only size info is requested
    given_cmd sizes && my_exit 0

    # Make sure the target is not in use
    umount_all $target_dev
    local final_q=$(quest $"Ready to make live-usb on device %s by %s" \
        "$(pqq ${target_dev##*/})" "$from_act $from_thing $(pqq $from_value)")

    final_q=$(printf "%s\n%s" "$final_q" "$(quest $"Shall we begin?")")

    #--- One last check with the user before we start doing the work
    YES_no_pretend "$final_q" || my_exit

    START_T=$(date +%s)

    need partition && do_partition "$target_dev" "$MSDOS_GPT" "$ext_size" "$mib_size"

    sync; sync

    cmd wait_for_file "$ext_dev"
    need makefs-ext && do_makefs_ext "$ext_dev" "$EXT4_OPTIONS" "$EXT4_LABEL"

    cmd wait_for_file "$fat_dev"
    need makefs-fat && do_makefs_fat $fat_dev

    sync; sync

    my_mount $ext_dev $EXT_DIR
    my_mount $fat_dev $FAT_DIR

    if [ "$QUIET" ]; then
        (echo; df -Tm $EXT_DIR $FAT_DIR; echo) >> $LOG_FILE
    else
        (echo; df -Tm $EXT_DIR $FAT_DIR; echo) | tee -a $LOG_FILE
    fi

    need copy-ext && do_copy_ext $ISO_DIR $EXT_DIR
    need copy-fat && do_copy_fat $ISO_DIR $FAT_DIR

    local ext_uuid=$(lsblk -no uuid $ext_dev)
    local fat_uuid=$(lsblk -no uuid $fat_dev)

    need uuids   && do_uuids $EXT_DIR "$ext_uuid" "$FAT_DIR/$GRUB_CONF" "$fat_uuid"

    [ ${#cheats} -gt 0 ] && need cheats-syslinux && do_cheats_syslinux $EXT_DIR "$cheats"
    [ ${#cheats} -gt 0 ] && need cheats-grub     && do_cheats_grub     $FAT_DIR "$cheats"

    need install && do_install_bootloader $target_dev $EXT_DIR $MSDOS_GPT

    my_exit 0
}


#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
check_from() {
    local var=$1  cmd_from=$2  exclude=$3
    case $cmd_from in
        iso|file|iso-file) eval $var=\$cmd_from ; return 0 ;;
            clone|clone=*) eval $var=\$cmd_from ; return 0 ;;
    esac
    local from_dev=$(expand_device "$cmd_from")
    if [ ${#from_dev} -gt 0 ]; then

        eval "$var=dev=\$from_dev"
        return 0

    elif test -f "$cmd_from"; then
        eval "$var=file=\$cmd_from"
        return 0
    else
        fatal "The --from parameter '%s' was not recognized" "$cmd_from"
    fi


}

#------------------------------------------------------------------------------
# Fill the $from_label variable from a simple printf but ONLY if that
# variable is empty
#------------------------------------------------------------------------------
mk_from_label() {
    local fmt=$1  what=${2##*/}
    [ ${#from_label} -gt 0 ] && return
    from_label=$(printf "$fmt" "$(pqq "$what")")
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
select_usb_src() {
    local var=$1  exclude=$2
    local title=$"Please select the source for the new live-usb"
    local menu=$(cli_live_usb_src_menu "$exclude")
    my_select_quit "$var" "$title" "$menu"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
select_target_device() {
    local var=$1  live_dev=$2  from_dev=$3
    local menu=$(cli_drive_menu "$live_dev" "$from_dev")
    local dev cnt=$(count_lines "$menu")
    case $cnt in
        0) fatal $"No target usb drives found to create a live-usb on" ;;
        1) dev=$(echo "$menu" | cut -d"$P_IFS" -f1 | head -n1)
            Msg $"Only one target usb device was found: %s" "$(echo $(echo "$menu" | cut -d"$P_IFS" -f2))"
           eval $var=\$dev
           return ;;
    esac
    my_select_quit $var "Please select the target usb device" "$menu"
}


#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
verify_sizes() {
    local mib_var=$1  ext_var=$2  dev=$3  dir=$4  cmd_percent=$5  fat_size=$6  default_size=${7:-100}
    local percent=${cmd_percent:-$default_size}

    local total_size=$(parted --script $dev unit MiB print | sed -rn "s/^Disk.*: ([0-9]+)MiB$/\1/p")

    local did_size
    while true; do
        #--- calculate and show various sizes before we through errors due to size
        local mib_val=$((total_size * percent / 100 - 1))
        local ext_val=$((mib_val - fat_size))
        local total_extra=$((total_size - mib_val))
        local ext_needed=$(du_size $dir/*)
        local fat_needed=$(du_size $dir/{boot,EFI,efi})
        local ext_extra=$((ext_val - ext_needed))
        local fat_extra=$((FAT_SIZE - fat_needed))

        local min_percent=$((1 + 100 * (ext_needed + fat_size + EXT_MARGIN + FAT_MARGIN) / total_size))

        usb_stats $"entire drive"    "$total_size" "$mib_val"  "$total_extra" \
                  $"main partition"  "$ext_val" "$ext_needed"  "$ext_extra" \
                  $"uefi partition"  "$fat_size" "$fat_needed"  "$fat_extra" \

        check_size ext $ext_extra $EXT_MARGIN warn
        check_size fat $fat_extra $FAT_MARGIN warn

        eval $mib_var=\$mib_val
        eval $ext_var=\$ext_val

        [ "$did_size" ] && break
        did_size=true
        if [ $min_percent -ge 90 ]; then
            msg $"Already using over 90% of the device"
            break
        fi

        # Only offer to change if a size was not given on the cmdline
        [ ${#cmd_percent} -gt 0 ] && break
        expert_YES_no $"Do you want change how much of the device is used?" || break
        select_partition_size percent "$min_percent" "$total_size"

        mib_val=$((total_size * percent / 100 - 1))
        msg $"Have set size to %s (%s MiB)" "$(hq $percent%)" "$(nq $(add_commas $mib_val | color_commas))"
    done

    check_size ext $ext_extra $EXT_MARGIN fatal
    check_size fat $fat_extra $FAT_MARGIN fatal
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
select_partition_size() {
    local var=$1  min_size=$2  total_size=$3
    local title1=$"Please select how much space to use for the live-usb partitions"
    local menu=$(partition_size_menu "$min_size" "$total_size")
    my_select $var "$title1" "$menu"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
cheats_menus() {
    local var=$1
    local tz_cheat cheats
    cli_text_menu cheats lang "Select default Language for the live-usb" \
        "Language implies timezone and other things"

    local blurb=$(printf "Timezones are listed by longitude. %s denotes daylight savings time" "$(pqq "*")")
    cli_text_menu tz_cheat tz "Select Default Timezone for the live-usb" "$blurb"

    [ "$tz_cheat" ] && cheats="$cheats${cheats:+ }$tz_cheat"
    eval $var=\$cheats
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
mount_device() {
    local dev=$(expand_device "$1")  dir=$2
    [ ${#dev} -gt 0 ]     || fatal "Could not find device %s" "$1"
    mkdir -p "$dir"       || fatal "Failed to create mountpoint directory %s" "$dir"
    is_mountpoint "$dir"  && fatal "Directory '%s' is already a mountpoint"   "$dir"

    is_mounted "$dev"     && fatal "Device %s is already mounted" "$dev"
    [ "$(stat -c %t "$dev")" = "b" ] && msg $"Please wait while we mount disc at %s" "$(pq $dev)"
    always_cmd mount -o ro "$dev" "$dir"
    is_mountpoint "$dir"  || fatal "Failed to mount device %s at %s" "$dev"   "$dir"
}

#------------------------------------------------------------------------------
# Mount an iso file
#------------------------------------------------------------------------------
mount_iso_file() {
    local file=$1  dir=$2

    test -e "$file" || fatal $"Could not find iso file %s" "$file"
    test -r "$file" || fatal $"Could not read iso file %s" "$file"

    local type
    for type in iso9660 udf; do
        mount -t $type -o loop,ro "$file" $dir 2>/dev/null
        is_mountpoint $dir && return 0
    done

    fatal $"Could not mount iso file %s" "$file"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
clone_directory() {
    local from_dir=$1 targ_dir=$2
    is_mountpoint "$targ_dir" && fatal $"Directory '%s' is already a mountpoint" "$targ_dir"

    test -d "$from_dir"       || fatal $"Clone directory '%s' is not a directory"   "$from_dir"
    is_mountpoint "$from_dir" || warn  $"Clone directory '%s' is not a mountpoint"  "$from_dir"

    # mounting it as tmpfs makes cleanup trivial (we are still touching files nad
    # making directories
    mount -t tmpfs tmpfs "$targ_dir"

    # FIXME: should this error message have a device, not a directory?
    local boot_dir
    find_live_boot_dir boot_dir "$from_dir" "$LINUXFS_NAME" \
        || fatal $"No '%s' file found in any directory on clone device at '%s'" "$LINUXFS_NAME" "$from_dir"

    msg "Live boot directory %s" "$(pq $boot_dir)"

    # Prepare to get all files/dirs from under the boot-directory on a frugal install
    local full_boot_dir="$from_dir/${boot_dir#/}"
    local src_root_dir=$from_dir

    if [ -z "${boot_dir##*Frugal*}" ]; then
        msg "Cloning from a frugal directory"
        src_root_dir=$full_boot_dir
    fi

    # NOTE:
    # the cd && eval "ls ..." below allows us to use globbing expansions with spaces in paths

    # Bind mount directories
    local dir from dest
    while read dir; do
        [ ${#dir} -gt 0 ] || continue
        from="$src_root_dir/$dir"
        dest="$targ_dir/$dir"
        test -d "$from" || continue
        mkdir -p "$dest" || fatal $"Could not create directory %s" "$dest"
        mount --bind "$from" "$dest"
    done <<Clone_Dirs
$(cd "$src_root_dir" && eval "ls -d $CLONE_DIRS" 2>/dev/null)
Clone_Dirs

    # Bind mount top level files
    local file
    while read file; do
        [ ${#file} -gt 0 ] || continue
        from="$src_root_dir/$file"
        dest="$targ_dir/$file"
        test -f "$from" || continue
        mkdir -p "$(dirname "$dest")" || fatal $"Could not mkdir %s" "$(dirname "$dest")"
        touch "$dest"                 || fatal $"Could not touch file %s" "$dest"
        mount --bind "$from" "$dest"
    done <<Clone_Files
$(cd "$src_root_dir" && eval "ls -d $CLONE_FILES" 2>/dev/null)
Clone_Files

    # Bind mount boot-dir files
    while read file; do
        [ ${#file} -gt 0 ] || continue
        from="$full_boot_dir/$file"
        dest="$targ_dir/${DEF_BOOT_DIR#/}/$file"

        test -f "$from" || continue
        mkdir -p "$(dirname "$dest")" || fatal $"Could not mkdir %s" "$(dirname "$dest")"
        touch "$dest"                 || fatal $"Could not touch file %s" "$dest"
        mount --bind "$from" "$dest"
    done <<Clone_Bdir_Files
$(cd "$full_boot_dir" && eval "ls -d $CLONE_BDIR_FILES" 2>/dev/null)
Clone_Bdir_Files
}

#------------------------------------------------------------------------------
# Partition the target usb device
#------------------------------------------------------------------------------
do_partition() {
    local drive=$1  type=${2:-msdos}  ext_size=$3  mib_size=$4

    local boot_flag
    case $type in
          gpt) boot_flag=legacy_boot ;;
        msdos) boot_flag=boot        ;;
            *) fatal $"Unknown partitioning scheme: %s.  Expected msdos or gpt" "$type"
               ;;
    esac

    msg $"Using %s partitioning" $(pq $type)

    # Clear out previous partition table (darned "dd" live-usbs)
    cmd dd if=/dev/zero of=$drive count=1 bs=512

    cmd parted --script --align optimal $target_dev \
        unit MiB                                    \
        mklabel $type                               \
        mkpart primary ext4  1         $ext_size    \
        mkpart primary fat32 $ext_size $mib_size    \
        set 1 $boot_flag on                         \
        set 2 esp  on || fatal $"Partitioning failed"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
wait_for_file() {
    local file=$1  name={$2:-Device}  delay=${3:-.1}  total=${4:-40}
    local i
    for i in $(seq 1 $total); do
        test -e $file && return 0
        sleep $delay
    done
    fatal $"%s does not exist!" "$name $file"
}

#------------------------------------------------------------------------------
# Make the ext4 file system
#------------------------------------------------------------------------------
do_makefs_ext() {
    local dev=$1  options=$2  label=$3  force_ext

    force makefs && force_ext="-F"
    cmd mkfs.ext4 $force_ext $options -L "$label" $dev \
        || fatal "makefs" $"Could not make %s file system on %s.  Perhaps try %s" "ext4" $ext_dev "--force=makefs"
}

#------------------------------------------------------------------------------
# Make the fat32 file system
#------------------------------------------------------------------------------
do_makefs_fat() {
    local fat_dev=$1
    cmd mkfs.fat -n "LIVE-ESP" $fat_dev \
        || fatal $"Could not make %s file system on %s" "fat32" "$fat_dev"
}

#------------------------------------------------------------------------------
# Copy from mounted source (or the clone) to the ext4 partition
#------------------------------------------------------------------------------
do_copy_ext() {
    local iso_dir=$1  ext_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $ext_dir/*

    if test -d $ext_dir/antiX && ! force copy; then
        warn $"Not over-writing %s partition due to existing %s directory" ext antiX/
        warn $"Use %s to overwrite" "--force=copy"
        return
    fi
    msg $"Copying files ..."
    cmd cp -a $iso_dir/* $ext_dir/ || fatal $"Error when copying files to live usb"
    sync
}

#------------------------------------------------------------------------------
# Copy selected directories from the source to the fat32 partitions
#------------------------------------------------------------------------------
do_copy_fat() {
    local iso_dir=$1  fat_dir=$2

    [ "$CLEAR" ] && cmd rm -rf $fat_dir/* 2>/dev/null

    local top
    for top in $iso_dir/{efi,EFI,boot}; do
        test -e $top || continue
        cmd cp -r $top $fat_dir/ \
            || warn $"Error when copying %s files to fat partition" "$(basename $top)"
    done
}

#------------------------------------------------------------------------------
# Use the gfxsave script to add chaats to the gfxboot/syslinux bootladers
#------------------------------------------------------------------------------
do_cheats_syslinux() {
    #warn "Cheats are still being worked on"; return

    local ext_dir=$1  cheats=$2
    local syslinux_cfg=$ext_dir/boot/syslinux/syslinux.cfg

    require cheats-syslinux gfxsave || return

    local file params
    local verbose=1
    [ "$BE_VERBOSE" ] && verbose=6
    if test -w $syslinux_cfg; then
        params=$(sed -nr "1,/^\s*APPEND\s/s/^\s*APPEND\s+//p" $syslinux_cfg)
        Msg "syslinux params: %s" "$(pq $params $cheats)"
        VERBOSE=$verbose CMDLINE="$params $cheats" cmd gfxsave $ext_dir/boot both
    else
        warn $"Could not find %s file to update" "$(basename $syslinux_cfg)"
    fi
}

#------------------------------------------------------------------------------
#  Use the grub2-save script to add cheats to the UEFI grub2 bootloader
#------------------------------------------------------------------------------
do_cheats_grub() {
    #warn "Cheats are still being worked on"; return
    local fat_dir=$1  cheats=$2
    local grub_cfg=$fat_dir/boot/grub/grub.cfg

    require cheats-grub vmlinuz-version grub2-save || return

    local params

    if test -w $grub_cfg; then
        params=$(sed -nr "1,/^\s*linux\s/s/^\s*linux\s+[^ ]+//p" $grub_cfg)
        Msg "grub params: %s" "$(pq $params $cheats)"
        cmd grub2-save $fat_dir --no-kernel --cheats="${params% } $cheats"
    else
        warn $"Could not find %s file to update" $(basename $grub_cfg)
    fi
}

#------------------------------------------------------------------------------
# Here is a tricky part.  The grub2.cfg must know the UUID of the main system
# and the main system must know the UUID of the fat partition in order for the
# user to be amble to save their  boot parameter selections.
#------------------------------------------------------------------------------
do_uuids() {
    local ext_dir=$1  ext_uuid=$2  grub_cfg=$3  fat_uuid=$4
    if [ ${#fat_uuid} -gt 0 ]; then
        local fat_file=$ext_dir/antiX/esp-uuid
        cmd mkdir -p $(dirname $fat_file) || fatal $"Making directory %s failed" "$(dirname $fat_file)"
        cmd write_file $fat_file $fat_uuid
    else
        warn $"No %s given for %s partition" UUID fat
    fi

    if [ ${#ext_uuid} -eq 0 ]; then
        warn $"No %s given for %s partition" UUID ext4
        return
    fi

    if ! test -e $grub_cfg; then
        warn $"Could not find %s file" "$(basename $grub_cfg)"
        return
    fi

    local new_line="search --no-floppy --set=root --fs-uuid $ext_uuid"
    if grep -q "search.*--set=root.*" $grub_cfg; then
        # Replace the line(s) if it/they exists
        cmd sed -i "/search.*--set=root.*/  s/.*/$new_line/" $grub_cfg \
            || fatal "sed on %s failed" "$(basename $grub_cfg)"
    else
        # Add the new line before the first menuentry line if not
        cmd sed -ri "1,/^\s*menuentry/s/(^\s*menuentry)/$new_line\n\n\1/" $grub_cfg \
            || fatal "sed on %s failed" "$(basename $grub_cfg)"
    fi
}

#------------------------------------------------------------------------------
# This installs the legacy syslinux bootloader
#------------------------------------------------------------------------------
do_install_bootloader() {
    local target_dev=$1  ext_dir=$2  type=$3

    local fname
    case $type in
          gpt) fname=gptmbr.bin ;;
        msdos) fname=mbr.bin    ;;
            *) fatal $"Unknown partitioning scheme: %s.  Expected msdos or gpt" "$type"
               ;;
    esac

    local dir file d
    for dir in /usr/share/syslinux /usr/lib/syslinux/mbr; do
        test -e $dir/$fname || continue
        file=$dir/$fname
        break
    done

    [ "$file" ] || fatal $"Could not find file %s" "$fname"
    cmd dd bs=440 conv=notrunc count=1 if=$file of=$target_dev > /dev/null || fatal $"%s command failed" dd

    local sdir idir syslinux_dir isolinux_dir
    for sdir in boot/syslinux syslinux; do
        test -d $ext_dir/$sdir || continue
        syslinux_dir=$ext_dir/$sdir
        break
    done
    if [ -z "$syslinux_dir" ]; then
        for idir in boot/isolinux isolinux; do
            test -d $ext_dir/$idir || continue

            warn $"Create syslinux directory from %s" $idir
            syslinux_dir=$ext_dir/${idir%isolinux}syslinux
            cmd cp -r $ext_dir/$idir $syslinux_dir || fatal $"Could not copy the isolinux directory"
            local f
            for f in $(cd $syslinux_dir && ls isolinux.*); do
                test -e $ext_dir/$sdir/$f || continue
                cmd mv $ext_dir/$sdir/$f $ext_dir/$sdir/syslinux${f#isolinux}
            done
            break
        done
    fi
    [ "$syslinux_dir" ] || fatal $"Could not find a syslinux or isolinux directory"
    cmd extlinux -i $syslinux_dir || fatal "%s command failed" extlinux
}

check_target() {
    local target=$1  live_dev=$2

    # Make sure our target is a real device
    local target_dev=$(expand_device $target)

    [ ${#target_dev} -gt 0 ] || fatal $"Could not find device %s" "$target"
    [ ${#live_dev}   -gt 0 ] || return
    local live_drive=$(get_drive ${live_dev##*/} )
    local targ_drive=$(get_drive ${target##*/}   )
    [ "$live_drive" = "$targ_drive" ] && fatal "Target '%s' cannot be on the live device '%s'" "$target" "$live_drive"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
check_size() {
    local type=$1  extra=$2  margin=$3  action=${4:-fatal}
    [ $extra -lt 0 ]       && $action $"Not enough space on %s partition" "$type"
    [ $extra -lt $margin ] && $action $"Less than %s MiB would remain on %s partition" "$margin" "$type"
}

my_exit() {
    local ret=${1:-0}

    show_elapsed

    if [ "$DEBUG" ]; then
        echo -n "${green}Press <Enter>$nc_co "
        read x
    fi

    Msg "=> cleaning up"
    exit $ret
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
start_log() {
    local args=$1 cmds=${2# }

    LOG_FILE=$THE_LOG_FILE

    cat <<Start_Log >> $LOG_FILE
---------------------------------------------------------------------
$ME
    started: $(date)
comand line: $args
  found lib: $FOUND_LIB

Start_Log
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
umount_work_dir() {
    local dir=${1:-$WORK_DIR}
    [ -n "$dir" ] || return

    sync; sync
    is_mountpoint "$dir" || return 0

    local try
    for try in $(seq 1 30); do
        umount --recursive "$dir"
        is_mountpoint "$dir" || return 0
        sleep .1
    done
    rmdir "$dir"
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
write_config() {
    local file=${1:-$CONFIG_FILE}
    local dir=$(dirname "$file")
    mkdir -p "$dir" || fatal "Could not make config file directory %s" "$dir"
    msg "Writing config file %s" "$(pq "$file")"

    cat<<Config_File >"$file"
          NO_QUIT="$NO_QUIT"  # for testing part of the UI

     ISO_FILE_DIR="$ISO_FILE_DIR"
    ISO_FILE_SPEC="$ISO_FILE_SPEC"
      SEARCH_DIRS="$SEARCH_DIRS"
     SEARCH_DEPTH="$SEARCH_DEPTH"
        MAX_FILES="$MAX_FILES"
     MIN_ISO_SIZE="$MIN_ISO_SIZE"

        MSDOS_GPT="$MSDOS_GPT"
     DEFAULT_SIZE="$DEFAULT_SIZE"
         CMD_SIZE="$CMD_SIZE"
         FAT_SIZE="$FAT_SIZE"
       EXT_MARGIN="$EXT_MARGIN"
       FAT_MARGIN="$FAT_MARGIN"

     EXT4_OPTIONS="$EXT4_OPTIONS"
       EXT4_LABEL="$EXT4_LABEL"

          LIVE_MP="$LIVE_MP"
     LINUXFS_NAME="$LINUXFS_NAME"
 MIN_LINUXFS_SIZE="$MIN_LINUXFS_SIZE"
     DEF_BOOT_DIR="$DEF_BOOT_DIR"

       CLONE_DIRS="$CLONE_DIRS"
      CLONE_FILES="$CLONE_FILES"
 CLONE_BDIR_FILES="$CLONE_BDIR_FILES"

        GRUB_CONF="$GRUB_CONF"
           CHEATS=""
     COLOR_SCHEME="$COLOR_SCHEME"
    QUESTION_MODE="$QUESTION_MODE"
Config_File

    return 0
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
clean_up() {
    umount_work_dir
    test -d $WORK_DIR && rmdir $WORK_DIR
    rm -f $LOCK_FILE
}

#------------------------------------------------------------------------------
#
#------------------------------------------------------------------------------
load_lib() {
    local file=$1  path=$2
    unset FOUND_LIB

    local dir lib found IFS=:
    for dir in $path; do
        lib=$dir/$file
        test -r $lib || continue
        if ! . $lib; then
            printf "Error when loading library %s\n" "$lib" >&2
            printf "This is a fatal error\n" >&2
            exit 15
        fi
        FOUND_LIB=$lib
        return 0
    done

    printf "Could not find library '%s' on path '%s'\n" "$file" "$path" >&2
    printf "This is a fatal error\n" >&2
    exit 17
}

#===== Start Here =============================================================
load_lib "$SHELL_LIB" "$LIB_PATH"

set_colors

main "$@"

