.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "LIVE-USB-MAKER 1"
.TH LIVE-USB-MAKER 1 "2016-10-14" "Version 2.0.0" "antiX Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
live\-usb\-maker \-\- Create an MX/antiX live\-usb
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Create a live-usb starting from an iso file, or a live\-cd/dvd or
an existing live-usb or even a running live system.  Always uses
an ext4 filesystem for the live-usb but also adds a small fat32
partition so the new live-usb can boot via legacy or \s-1UEFI.\s0
.PP
Provides options to set the default language and/or default
timezone on the new live-usb.
.SH "BASIC OPERATION"
.IX Header "BASIC OPERATION"
You can specify everything with command line options or you can
let a series of menus guide you or you can mix and match.  You
will only be prompted for what was not specified on the command
line.
.PP
The first menu will let you choose the target usb device.
.PP
The second menu will give you a choice of the source to use for
the new live-usb.  If you choose to use an iso-file then the
program will scan for iso-files in likely locations and give you
a list to choose from.
.SH "ISO FILE SEARCH (not implemented!)"
.IX Header "ISO FILE SEARCH (not implemented!)"
You can use wildcard characters such as \fB*\fR in an iso file name
or directory.  If you do then this will also trigger a search
based on what you specified.  The directory path and the filename
are treated differently.  If a \fB*\fR is used in a directory path
then every matching directory will be used as a starting point to
find files that match the filename you gave (with or without
wildcards).   This is highly experimental.
.PP
You can skip the first menu and immediately go to an iso-file
search using the \fB\-\-from=xxxx\fR parameter.  If you put in the
name of an iso file then that file will be used.  If you use
the special name \*(L"iso-file\*(R" then a generic iso file search
will be initiated.  If you use a file/path with one or more
\&\fB*\fR characters then the path and the filename you gave will
be used as the starting point of the search.
.SH "CLONE MODE"
.IX Header "CLONE MODE"
If the source is the current live system or a live-usb then
clone-mode will be used automatically.  This will only copy the
files that are needed to make a live-usb.  None of the auxiliary
files that were created during operation of the source live-usb
will be copied over.
.PP
You can, of course, specify a source live-usb from the command
line by using \fB\-from=device\fR the device is a device name like
\&\fBsdd1\fR.   If you don't specify the partition then we will assume
you mean the first partition.  Invoked in this way, all files
from the source live-usb will be copied over.  This may be useful
for distros other than \s-1MX\s0 and antiX.  If you want to enable clone
mode then use \fB\-\-from=clone=device\fR instead.
.SH "CLONING A FRUGAL INSTALL"
.IX Header "CLONING A FRUGAL INSTALL"
The only way to make a live-usb from a Frugal install is if you
use clone mode (see above).  This will only work incompletely on
Frugal installs created before \s-1MX\-16. \s0 The \f(CW\*(C`/EFI\*(C'\fR directory will
be missing so legacy boot will work on the new live-usb but \s-1UEFI\s0
booting won't.  Starting in \s-1MX\-16,\s0 the \f(CW\*(C`/EFI\*(C'\fR directory (along
with the \f(CW\*(C`version\*(C'\fR and \f(CW\*(C`cdrom.ico\*(C'\fR files will be copied into
the frugal directory during the frugal install).
.SH "UPDATE INITRD ONLY ACTION"
.IX Header "UPDATE INITRD ONLY ACTION"
This action will update the initrd using a template found at the
default location \fI/usr/lib/iso\-template/template\-initrd.gz\fR.
You can specify a different location with the \fB\-\-initrd=xxxx\fR
command line option.  This action is typically used to upgrade to
a new live initrd or to to test a bug fix.
.SH "UPDATE MODULES"
.IX Header "UPDATE MODULES"
The \fB\-\-modules=list\fR option will add the kernel modules in
the list to the current initrd.gz.  This would typically be
used during testing.
.SH "COMMANDS"
.IX Header "COMMANDS"
You can have fine control over which operations get performed
by putting one or more commands on the command line.  For
normal option there is no need to do this.
.PP
Use a trailing \*(L"+\*(R" to run a command and all commands after it.
.PP
Commands:
    sizes        Only show and check sizes, nothing else
    all          Do all commands below
    partition    Partition the live usb
    makefs-ext   Create the ext file system
    makefs-fat   Create the fat file system
    makefs       Both makefs-ext and makefs-fat
    copy-ext     Copy files to live usb ext partition
    copy-fat     Copy files to fat partition
    copy         Both copy-ext and copy-fat
    uuids        Write UUIDs linking file systems
    cheats       Copy cheat codes to live-usb
    install      Install the legacy bootloader
.SH "NOTES"
.IX Header "NOTES"
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2016
BitJam for antiX <http://antix.freeforums.org/>
